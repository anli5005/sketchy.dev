generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url = env("DATABASE_URL")
}

model User {
    id String @id @default(uuid())
    name String
    isActive Boolean @default(true)
    isAdmin Boolean @default(false)
    tokenSubject String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    publicKeys PublicKey[]
    spaces SpacesOnUsers[]
}

model SpacesOnUsers {
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id])
    userId String

    space Space @relation(fields: [spaceId], references: [id])
    spaceId String

    @@id([userId, spaceId])
}

model Space {
    id String @id @default(uuid())
    name String
    slug String @unique

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    links Link[]
    scopedLinks ScopedLink[]
    users SpacesOnUsers[]
}

model PublicKey {
    id String @id @default(uuid())
    keyId String @unique
    keyData String
    counter Int @default(0)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User? @relation(fields: [userId], references: [id])
    userId String?
}

model Link {
    id String @id @default(uuid())
    slug String @unique
    url String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    expiresAt DateTime?

    space Space @relation(fields: [spaceId], references: [id])
    spaceId String

    clicks Int @default(0)
    maxClicks Int?
}

model ScopedLink {
    id String @id @default(uuid())
    slug String
    url String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    expiresAt DateTime?

    space Space @relation(fields: [spaceId], references: [id])
    spaceId String

    clicks Int @default(0)
    maxClicks Int?

    @@unique([slug, spaceId])
}

model Challenge {
    id String @id @default(uuid())
    bytes Bytes @unique
    
    createdAt DateTime @default(now())
}